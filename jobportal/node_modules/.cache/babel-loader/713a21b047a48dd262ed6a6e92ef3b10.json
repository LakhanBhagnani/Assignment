{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\GitHub\\\\Assignment\\\\jobportal\\\\src\\\\pages\\\\CandidateHome.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport NavBar from \"../component/NavBar\";\nimport ReactPaginate from \"react-paginate\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CandidateHome = () => {\n  _s();\n\n  const [jobs, setJobs] = useState({});\n  const [hasApplied, setApplied] = useState(false);\n  const [userdetails] = useState(JSON.parse(localStorage.getItem(\"UserDetails\")));\n  const [isLoggedin] = useState(localStorage.getItem(\"token\") == null ? false : true);\n  const [pageNumber, setPagenumber] = useState(0);\n  const Jobsperpage = 2;\n  const pageVisited = pageNumber * Jobsperpage;\n  const pageCount = Math.ceil(jobs.length / Jobsperpage);\n\n  const changePage = ({\n    selected\n  }) => {\n    setPagenumber(selected);\n  };\n\n  const ApplyNow = value => {\n    let userId = userdetails.CANDIDATE_ID;\n    let appliedDate = new Date();\n    let obj = {\n      value,\n      userId,\n      appliedDate\n    };\n    axios.post(\"http://localhost:3001/api/applyNow/\", obj).then(response => {\n      if (response) {\n        console.log(response);\n        setApplied(true);\n      }\n    });\n  };\n\n  const displayJobs = Object.entries(jobs).slice(pageVisited, pageVisited + Jobsperpage).map(job => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container mt-2 bg-light border-dark\",\n        id: job[1].JOB_ID,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex \",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-1\",\n            children: job[1].JobRole\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-1 mr-auto\",\n            children: [\"(\", job[1].JobType, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-1\",\n            children: [job[1].CompanyName, \",\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-1\",\n            children: job[1].JobLocation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex p-2\",\n          children: [\"Job Description: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 32\n          }, this), job[1].JobDescription]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex p-1\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"order-3 p-1\",\n              children: \"Experience\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"order-2 p-1\",\n              children: [job[1].RequiredExperience, \"+\", parseInt(job[1].RequiredExperience) > 1 ? \" Years\" : \" Year\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-row mr-auto\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"order-2 p-1\",\n              children: \"Qualification\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"order-3 p-1\",\n              children: job[1].RequiredQualification\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"order-2 p-2\",\n              children: \"Job Posted on\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"order-3 p-1\",\n              children: [new Date(job[1].PostingDate).getDate(), \"/\", new Date(job[1].PostingDate).getMonth() + 1, \"/\", new Date(job[1].PostingDate).getFullYear()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), job[1].APPLICATION_ID ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              class: \"btn btn-success float-right appbtn\",\n              children: [\"Applied\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this)\n          }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              class: \"btn btn-info float-right appbtn\",\n              \"data-dismiss\": \"alert\",\n              onClick: () => ApplyNow(job[1].JOB_ID),\n              children: \"Apply Now\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 19\n            }, this)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, job[1].JOB_ID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this);\n  });\n\n  const loadData = () => {\n    let userId = userdetails.CANDIDATE_ID;\n    fetch(\"http://localhost:3001/api/Alljobs/\" + userId).then(response => response.json()).then(data => {\n      setJobs(data.recordset);\n    });\n  };\n\n  useEffect(() => {\n    loadData();\n  }, [jobs]);\n\n  if (hasApplied) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/jobsApplied\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (isLoggedin) {\n    if (localStorage.getItem(\"type\") === \"Company\") return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/CompanyHome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 14\n    }, this);\n  } else if (!isLoggedin) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 12\n    }, this);\n  }\n\n  const distinctQualifications = Object.entries(jobs).map(function (x) {\n    return x[1].RequiredQualification;\n  }).filter(function test(val, ind, self) {\n    return self.indexOf(val) === ind;\n  });\n  const QualificationRender = distinctQualifications.map(Qualification => {\n    return /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n      onClick: () => QualificationFilter(Qualification),\n      children: Qualification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  });\n\n  const QualificationFilter = RequiredQualification => {\n    let filtered = jobs.filter(e => {\n      return e.RequiredQualification === RequiredQualification;\n    });\n    setJobs(filtered);\n  };\n\n  const distinctLocations = Object.entries(jobs).map(function (x) {\n    return x[1].JobLocation;\n  }).filter(function test(val, ind, self) {\n    return self.indexOf(val) === ind;\n  });\n  const LocationRender = distinctLocations.map(JobLocation => {\n    return /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n      onClick: () => JobLocationFilter(JobLocation),\n      children: JobLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this);\n  });\n\n  const JobLocationFilter = JobLocation => {\n    let filtered = jobs.filter(e => {\n      return e.JobLocation === JobLocation;\n    });\n    setJobs(filtered);\n  };\n\n  const DistinctJobType = Object.entries(jobs).map(function (x) {\n    return x[1].JobType;\n  }).filter(function test(val, ind, self) {\n    return self.indexOf(val) === ind;\n  });\n  const JobTypeRender = DistinctJobType.map(JobType => {\n    return /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n      onClick: () => JobTypeFilter(JobType),\n      children: JobType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this);\n  });\n\n  const JobTypeFilter = JobType => {\n    let filtered = jobs.filter(e => {\n      return e.JobType == JobType;\n    });\n    setJobs(filtered);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"filters d-flex\",\n      children: [/*#__PURE__*/_jsxDEV(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Qualification\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          onClick: () => loadData(),\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), QualificationRender]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Location\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          onClick: () => loadData(),\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), LocationRender]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropdownButton, {\n        id: \"dropdown-basic-button\",\n        title: \"Job Type\",\n        children: [/*#__PURE__*/_jsxDEV(Dropdown.Item, {\n          onClick: () => loadData(),\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), JobTypeRender]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      type: \"none\",\n      children: displayJobs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReactPaginate, {\n      previousLabel: \"Previous\",\n      nextLabel: \"Next\",\n      pageCount: pageCount,\n      onPageChange: changePage,\n      containerClassName: \"paginationBttns\",\n      previousLinkClassName: \"previousBttn\",\n      nextLinkClassName: \"nextBttn\",\n      disabledClassName: \"paginationDisabled\",\n      activeClassName: \"paginationActive\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CandidateHome, \"Fb1OnI41Fg1zPaCFH79A37+7dMg=\");\n\n_c = CandidateHome;\nexport default CandidateHome;\n\nvar _c;\n\n$RefreshReg$(_c, \"CandidateHome\");","map":{"version":3,"sources":["C:/Users/Admin/Documents/GitHub/Assignment/jobportal/src/pages/CandidateHome.jsx"],"names":["axios","React","useEffect","useState","Redirect","NavBar","ReactPaginate","DropdownButton","Dropdown","CandidateHome","jobs","setJobs","hasApplied","setApplied","userdetails","JSON","parse","localStorage","getItem","isLoggedin","pageNumber","setPagenumber","Jobsperpage","pageVisited","pageCount","Math","ceil","length","changePage","selected","ApplyNow","value","userId","CANDIDATE_ID","appliedDate","Date","obj","post","then","response","console","log","displayJobs","Object","entries","slice","map","job","JOB_ID","JobRole","JobType","CompanyName","JobLocation","JobDescription","RequiredExperience","parseInt","RequiredQualification","PostingDate","getDate","getMonth","getFullYear","APPLICATION_ID","loadData","fetch","json","data","recordset","distinctQualifications","x","filter","test","val","ind","self","indexOf","QualificationRender","Qualification","QualificationFilter","filtered","e","distinctLocations","LocationRender","JobLocationFilter","DistinctJobType","JobTypeRender","JobTypeFilter"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React, {  useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport NavBar from \"../component/NavBar\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nconst CandidateHome = () => {\r\n  const [jobs, setJobs] = useState({});\r\n  const [hasApplied, setApplied] = useState(false);\r\n  const [userdetails] = useState(\r\n    JSON.parse(localStorage.getItem(\"UserDetails\"))\r\n  );\r\n  const [isLoggedin] = useState(\r\n    localStorage.getItem(\"token\") == null ? false : true\r\n  );\r\n  const [pageNumber, setPagenumber] = useState(0);\r\n  const Jobsperpage = 2;\r\n  const pageVisited = pageNumber * Jobsperpage;\r\n  const pageCount = Math.ceil(jobs.length / Jobsperpage);\r\n\r\n  const changePage = ({ selected }) => {\r\n    setPagenumber(selected);\r\n  };\r\n  const ApplyNow = (value) => {\r\n    let userId = userdetails.CANDIDATE_ID;\r\n    let appliedDate = new Date();\r\n    let obj = {\r\n      value,\r\n      userId,\r\n      appliedDate,\r\n    };\r\n    axios.post(\"http://localhost:3001/api/applyNow/\", obj).then((response) => {\r\n      if (response) {\r\n        console.log(response);\r\n        setApplied(true);\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  const displayJobs = Object.entries(jobs)\r\n    .slice(pageVisited, pageVisited + Jobsperpage)\r\n    .map((job) => {\r\n      return (\r\n        <li>\r\n          <div\r\n            className='container mt-2 bg-light border-dark'\r\n            id={job[1].JOB_ID}\r\n            key={job[1].JOB_ID}\r\n          >\r\n            <div className='d-flex '>\r\n              <div className='p-1'>{job[1].JobRole}</div>\r\n              <div className='p-1 mr-auto'>({job[1].JobType})</div>\r\n              <div className='p-1'>{job[1].CompanyName},</div>\r\n              <div className='p-1'>{job[1].JobLocation}</div>\r\n            </div>\r\n            <div className='d-flex p-2'>\r\n              Job Description: <br />\r\n              {job[1].JobDescription}\r\n            </div>\r\n            <div className='d-flex p-1'>\r\n              <div className='flex-row'>\r\n                <div className='order-3 p-1'>Experience</div>\r\n                <div className='order-2 p-1'>\r\n                  {job[1].RequiredExperience}+\r\n                  {parseInt(job[1].RequiredExperience) > 1 ? \" Years\" : \" Year\"}\r\n                </div>\r\n              </div>\r\n              <div className='flex-row mr-auto'>\r\n                <div className='order-2 p-1'>Qualification</div>\r\n                <div className='order-3 p-1'>\r\n                  {job[1].RequiredQualification}\r\n                </div>\r\n              </div>\r\n              <div className='flex-row'>\r\n                <div className='order-2 p-2'>Job Posted on</div>\r\n                <div className='order-3 p-1'>\r\n                  {new Date(job[1].PostingDate).getDate()}/\r\n                  {new Date(job[1].PostingDate).getMonth() + 1}/\r\n                  {new Date(job[1].PostingDate).getFullYear()}\r\n                </div>\r\n              </div>\r\n              {job[1].APPLICATION_ID ? (\r\n                <>\r\n                  <button\r\n                    type='button'\r\n                    class='btn btn-success float-right appbtn'\r\n                  >\r\n                    Applied{\" \"}\r\n                  </button>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <button\r\n                    type='button'\r\n                    class='btn btn-info float-right appbtn'\r\n                    data-dismiss='alert'\r\n                    onClick={() => ApplyNow(job[1].JOB_ID)}\r\n                  >\r\n                    Apply Now\r\n                  </button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n  const loadData = () => {\r\n    let userId = userdetails.CANDIDATE_ID;\r\n    fetch(\"http://localhost:3001/api/Alljobs/\"+userId)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setJobs(data.recordset);\r\n      });\r\n  };\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [jobs]);\r\n\r\n  if (hasApplied) {\r\n    return <Redirect to='/jobsApplied' />;\r\n  }\r\n  if (isLoggedin) {\r\n    if (localStorage.getItem(\"type\") === \"Company\")\r\n      return <Redirect to='/CompanyHome' />;\r\n  } else if (!isLoggedin) {\r\n    return <Redirect to='/Login'></Redirect>;\r\n  }\r\n  const distinctQualifications = Object.entries(jobs)\r\n    .map(function (x) {\r\n      return x[1].RequiredQualification;\r\n    })\r\n    .filter(function test(val, ind, self) {\r\n      return self.indexOf(val) === ind;\r\n    });\r\n\r\n  const QualificationRender = distinctQualifications.map((Qualification) => {\r\n    return (\r\n      <Dropdown.Item onClick={() => QualificationFilter(Qualification)}>\r\n        {Qualification}\r\n      </Dropdown.Item>\r\n    );\r\n  });\r\n  const QualificationFilter = (RequiredQualification) => {\r\n    let filtered = jobs.filter((e) => {\r\n      return e.RequiredQualification === RequiredQualification;\r\n    });\r\n    setJobs(filtered);\r\n  };\r\n  const distinctLocations = Object.entries(jobs)\r\n    .map(function (x) {\r\n      return x[1].JobLocation;\r\n    })\r\n    .filter(function test(val, ind, self) {\r\n      return self.indexOf(val) === ind;\r\n    });\r\n  const LocationRender = distinctLocations.map((JobLocation) => {\r\n    return (\r\n      <Dropdown.Item onClick={() => JobLocationFilter(JobLocation)}>\r\n        {JobLocation}\r\n      </Dropdown.Item>\r\n    );\r\n  });\r\n  const JobLocationFilter = (JobLocation) => {\r\n    let filtered = jobs.filter((e) => {\r\n      return e.JobLocation === JobLocation;\r\n    });\r\n    setJobs(filtered);\r\n  };\r\n\r\n  const DistinctJobType = Object.entries(jobs)\r\n    .map(function (x) {\r\n      return x[1].JobType;\r\n    })\r\n    .filter(function test(val, ind, self) {\r\n      return self.indexOf(val) === ind;\r\n    });\r\n  const JobTypeRender = DistinctJobType.map((JobType) => {\r\n    return (\r\n      <Dropdown.Item onClick={() => JobTypeFilter(JobType)}>\r\n        {JobType}\r\n      </Dropdown.Item>\r\n    );\r\n  });\r\n  const JobTypeFilter = (JobType) => {\r\n    let filtered = jobs.filter((e) => {\r\n      return e.JobType == JobType;\r\n    });\r\n    setJobs(filtered);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <div class='filters d-flex'>\r\n        <DropdownButton id='dropdown-basic-button' title='Qualification'>\r\n          <Dropdown.Item onClick={() => loadData()}>All</Dropdown.Item>\r\n          {QualificationRender}\r\n        </DropdownButton>\r\n        <DropdownButton id='dropdown-basic-button' title='Location'>\r\n          <Dropdown.Item onClick={() => loadData()}>All</Dropdown.Item>\r\n          {LocationRender}\r\n        </DropdownButton>\r\n        <DropdownButton id='dropdown-basic-button' title='Job Type'>\r\n          <Dropdown.Item onClick={() => loadData()}>All</Dropdown.Item>\r\n          {JobTypeRender}\r\n        </DropdownButton>\r\n      </div>\r\n\r\n      <ul type='none'>{displayJobs}</ul>\r\n\r\n      <ReactPaginate\r\n        previousLabel={\"Previous\"}\r\n        nextLabel={\"Next\"}\r\n        pageCount={pageCount}\r\n        onPageChange={changePage}\r\n        containerClassName={\"paginationBttns\"}\r\n        previousLinkClassName={\"previousBttn\"}\r\n        nextLinkClassName={\"nextBttn\"}\r\n        disabledClassName={\"paginationDisabled\"}\r\n        activeClassName={\"paginationActive\"}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CandidateHome;\r\n"]},"metadata":{},"sourceType":"module"}