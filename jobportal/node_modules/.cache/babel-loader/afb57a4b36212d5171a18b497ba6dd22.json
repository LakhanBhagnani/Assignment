{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\GitHub\\\\Assignment\\\\jobportal\\\\src\\\\pages\\\\AddJob.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport axios from \"axios\";\nimport NavBar from \"../component/NavBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CandidateRegister = () => {\n  _s();\n\n  const [JobRole, setJobRole] = useState();\n  const [Description, setDescription] = useState();\n  const [Location, setLocation] = useState();\n  const [MinimumSalary, setMinimumSalary] = useState();\n  const [MaximumSalary, setMaximumSalary] = useState();\n  const [RequiredSkills, setRequiredSkills] = useState();\n  const [RequiredExperience, setRequiredExperience] = useState();\n  const [isLoggedin, setLogg] = useState(localStorage.getItem(\"token\") == null ? false : true);\n\n  const SubmitHandle = e => {\n    e.preventDefault();\n    var userObj = {\n      email,\n      Fname,\n      LName,\n      Username,\n      Password,\n      DOB,\n      Qualification,\n      PassingDate,\n      CurrentCity,\n      Skills,\n      Experience\n    };\n    axios.post(\"http://localhost:3001/api/registerCandidate/\", userObj).then(response => {\n      if (response) {\n        console.log(response);\n        setRedirect(true);\n      }\n    });\n  };\n\n  if (redirect) {\n    debugger;\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n\n  const checkpassword = pwd => {\n    if (pwd == Password) {\n      setPassword(pwd);\n      document.getElementById('passwordSpan').innerHTML = \"\";\n    } else {\n      debugger;\n      document.getElementById('passwordSpan').innerHTML = \"Password doesn't match\";\n      document.getElementById('passwordSpan').classList.add(\"myspans\");\n    }\n  };\n\n  const checkConstraints = passwd => {\n    let ele = document.getElementById(\"passwordConstraints\");\n    let lowerCaseLetters = /[a-z]/g;\n    let upperCaseLetters = /[A-Z]/g;\n    let Numbers = /[0-9]/g;\n    let specialChars = /[$,@,#]/g;\n    let isValid = true;\n\n    if (passwd.length < 8) {\n      ele.innerHTML = \"length must be greater than 8\";\n      isValid = false;\n    } else if (passwd.match(lowerCaseLetters) == null) {\n      ele.innerHTML = \"Password should contains small letters\";\n      isValid = false;\n    } else if (passwd.match(upperCaseLetters) == null) {\n      ele.innerHTML = \"Password should contains Capitals letters\";\n      isValid = false;\n    } else if (passwd.match(Numbers) == null) {\n      ele.innerHTML = \"Password should contains Numbers\";\n      isValid = false;\n    } else if (passwd.match(specialChars) == null) {\n      ele.innerHTML = \"Password should contains special like #,@,$\";\n      isValid = false;\n    } else if (isValid) {\n      ele.innerHTML = \"\";\n      setPassword(passwd);\n    } else {\n      ele.classList.add(\"myspans\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(CandidateRegister, \"iA56//SEtL14c73CGyF7eFjDYFQ=\");\n\n_c = CandidateRegister;\nexport default CandidateRegister;\n\nvar _c;\n\n$RefreshReg$(_c, \"CandidateRegister\");","map":{"version":3,"sources":["C:/Users/Admin/Documents/GitHub/Assignment/jobportal/src/pages/AddJob.jsx"],"names":["React","Component","useState","Redirect","axios","NavBar","CandidateRegister","JobRole","setJobRole","Description","setDescription","Location","setLocation","MinimumSalary","setMinimumSalary","MaximumSalary","setMaximumSalary","RequiredSkills","setRequiredSkills","RequiredExperience","setRequiredExperience","isLoggedin","setLogg","localStorage","getItem","SubmitHandle","e","preventDefault","userObj","email","Fname","LName","Username","Password","DOB","Qualification","PassingDate","CurrentCity","Skills","Experience","post","then","response","console","log","setRedirect","redirect","checkpassword","pwd","setPassword","document","getElementById","innerHTML","classList","add","checkConstraints","passwd","ele","lowerCaseLetters","upperCaseLetters","Numbers","specialChars","isValid","length","match"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport NavBar from \"../component/NavBar\";\r\nconst CandidateRegister = () => {\r\n\tconst [JobRole, setJobRole] = useState();\r\n\tconst [Description, setDescription] = useState();\r\n\tconst[Location,setLocation]=useState();\r\n\tconst[MinimumSalary,setMinimumSalary]=useState();\r\n\tconst[MaximumSalary,setMaximumSalary]=useState();\r\n\tconst [RequiredSkills, setRequiredSkills]=useState();\r\n\tconst [RequiredExperience, setRequiredExperience]=useState()\r\n\tconst [isLoggedin, setLogg] = useState(\r\n\t\tlocalStorage.getItem(\"token\") == null ? false : true\r\n\t);\r\n\t\r\n\r\n\tconst SubmitHandle = (e) => {\r\n\t\te.preventDefault();\r\n\t\tvar userObj = {\r\n\t\t\temail,\r\n\t\t\tFname,\r\n\t\t\tLName,\r\n\t\t\tUsername,\r\n\t\t\tPassword,\r\n\t\t\tDOB,\r\n\t\t\tQualification,\r\n\t\t\tPassingDate,\r\n\t\t\tCurrentCity,\r\n\t\t\tSkills,\r\n\t\t\tExperience,\r\n\t\t};\r\n\t\taxios\r\n\t\t\t.post(\"http://localhost:3001/api/registerCandidate/\", userObj)\r\n\t\t\t.then((response) => {\r\n\t\t\t\tif (response) {\r\n\t\t\t\t\tconsole.log(response);\r\n\t\t\t\t\tsetRedirect(true);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t};\r\n if (redirect) {\r\n\t   debugger;\r\n\t   return <Redirect to='/Login' />;\r\n}\r\n\r\n\tconst checkpassword=(pwd)=>{\r\n\t\tif(pwd==Password)\r\n\t\t\t{setPassword(pwd)\r\n\t\t\t\tdocument.getElementById('passwordSpan').innerHTML=\"\"}\r\n\t\telse\r\n\t\t{\r\n\t\t\tdebugger;\r\n\t\t\tdocument.getElementById('passwordSpan').innerHTML=\"Password doesn't match\";\r\n\t\t\tdocument.getElementById('passwordSpan').classList.add(\"myspans\");\r\n\t\t}\r\n\t}\r\n\tconst checkConstraints=(passwd)=>{\r\n\t\tlet ele=document.getElementById(\"passwordConstraints\");\r\n\t\tlet lowerCaseLetters = /[a-z]/g;\r\n\t\tlet upperCaseLetters=/[A-Z]/g;\r\n\t\tlet Numbers=/[0-9]/g;\r\n\t\tlet specialChars=/[$,@,#]/g\r\n\t\tlet isValid= true;\r\n\t\tif(passwd.length<8){\r\n\t\t\tele.innerHTML=\"length must be greater than 8\";\r\n\t\t\tisValid=false\r\n\t\t}else\r\n\t\tif(passwd.match(lowerCaseLetters)==null){\r\n\t\t\tele.innerHTML=\"Password should contains small letters\"\r\n\t\t\tisValid=false\r\n\t\t}else\r\n\t\tif(passwd.match(upperCaseLetters)==null){\r\n\t\t\tele.innerHTML=\"Password should contains Capitals letters\"\r\n\t\t\tisValid=false\r\n\t\t}else\r\n\t\t if(passwd.match(Numbers)==null){\r\n\t\t\tele.innerHTML=\"Password should contains Numbers\"\r\n\t\t\tisValid=false\r\n\t\t}else\r\n\t\tif(passwd.match(specialChars)==null){\r\n\t\t\tele.innerHTML=\"Password should contains special like #,@,$\"\r\n\t\t\tisValid=false\r\n\t\t}else\r\n\t\tif(isValid)\r\n\t\t{\r\n\t\t\tele.innerHTML=\"\"\r\n\t\t\tsetPassword(passwd);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tele.classList.add(\"myspans\");\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<NavBar />\r\n\t\t\t</>\r\n\t);\r\n};\r\n\r\nexport default CandidateRegister;\r\n"]},"metadata":{},"sourceType":"module"}